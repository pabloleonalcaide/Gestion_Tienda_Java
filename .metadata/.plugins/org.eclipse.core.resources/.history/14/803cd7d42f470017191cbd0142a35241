package stock;

import java.io.IOException;
import java.io.Serializable;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.Collections;
import java.util.ListIterator;

import enumeraciones.*;
import excepciones.ArticuloNoExisteException;
import excepciones.EdadNoValidaException;
import excepciones.FechaNoValidaException;
import excepciones.ImposibleEliminarException;
import excepciones.NombreNoValidoException;
import excepciones.PesoNoValidoException;
import excepciones.PrecioNoValidoException;
import jerarquia.Articulo;
import jerarquia.Cartas;
import jerarquia.Figura;
import jerarquia.Juego;
import jerarquia.Libro;
import jerarquia.Rol;
import jerarquia.Tablero;

/**
 * Stock de articulos, envoltorio de arraylist
 * 
 * @author pablo leon alcaide
 * 
 */
public class Stock implements Serializable {
	private static final long serialVersionUID = 1L;
	private ArrayList<Articulo> stock = new ArrayList<Articulo>();
	private boolean modificado = false;
	
	/**
	 * @return true false
	 */
	public boolean isModificado() {
		return modificado;
	}
	/**
	 * 
	 * @param modificado
	 */
	public void setModificado(boolean modificado) {
		this.modificado = modificado;
	}

	/**
	 * Ordena los articulos por orden alfabetico
	 * @see stock.CompareName
	 */
	void sortByName() {
		Collections.sort(stock, new CompareName());
	}

	/**
	 * Ordena los articulos por precio
	 * @see stock.ComparePrice
	 */
	void sortByPrice() {
		Collections.sort(stock, new ComparePrice());

	}

	/**
	 * Si encuentra el articulo en el stock, lo selecciona en la cesta del
	 * usuario, de lo contrario, lanza un mensaje advirtiendo
	 * 
	 * @param articulo
	 * @throws ArticuloNoExisteException
	 */
	void addToBasket(Articulo articulo) throws ArticuloNoExisteException {
		if (stock.contains(articulo))
			articulo.setSeleccionado(true);
		else
			throw new ArticuloNoExisteException("el art\u00edculo no existe");
	}

	/**
	 * si encuentra el articulo y está seleccionado por el usuario, lo vuelve de
	 * nuevo a false de lo contrario, lanza un mensaje
	 * 
	 * @param articulo
	 * @throws ArticuloNoExisteException 
	 */
	void takeOut(Articulo articulo) throws ArticuloNoExisteException {
		if (stock.contains(articulo) && articulo.isSeleccionado())
			articulo.setSeleccionado(false);
		else
			throw new ArticuloNoExisteException("no se pudo localizar el articulo");
	}

	/**
	 * Desmarca todos los articulos en cascada de la cesta del usuario
	 */
	void takeOutAll() {
		for (Articulo art : stock) {
			art.setSeleccionado(false);
		}
	}

	/**
	 * si el articulo no existia, lo incluye en el stock, si ya había alguno,
	 * aumenta la cantidad
	 * 
	 * @param articulo
	 * @param cantidad
	 */
	 void addToStock(Articulo articulo, int cantidad) {
		if (!stock.contains(articulo)) {
			stock.add(articulo);
		}
		int indice = stock.indexOf(articulo);
		stock.get(indice).setCantidad(stock.get(indice).getCantidad() + cantidad);
	}

	/**
	 * Remueve definitivamente el articulo del stock
	 * 
	 * @param articulo
	 * @throws ImposibleEliminarException
	 */
	public void removeFromStock(Articulo articulo) throws ImposibleEliminarException {
		if (!stock.remove(articulo))
			throw new ImposibleEliminarException("no se ha podido eliminar");
	}

	/**
	 * Comprueba y muestra las existencias de cada articulo
	 */
	String checkStock() {
		StringBuilder sb = new StringBuilder();
		for (Articulo art : stock) {
			sb.append("\n" + art.getNombre() + ": " + art.getCantidad());
			if (art.getCantidad() <= 5)
				sb.append(" (hay que comprar)");
		}
		return sb.toString();
	}

	/**
	 * Descataloga el articulo (ha dejado de comercializarse)
	 * 
	 * @param articulo
	 */
	void discontinueProduct(Articulo articulo) {
		int indice = stock.indexOf(articulo);
		stock.get(indice).setEstado(EstadoArticulo.DESCATALOGADO);
	}
	/**
	 * 
	 * @return size
	 */
	public int size() {
		return stock.size();
	}
	/**
	 * 
	 * @return isEmpty
	 */
	public boolean isEmpty() {
		return stock.isEmpty();
	}


	/**
	 * Extrae un Libro a traves de su id
	 */
	public Libro getLibro(int id) {
		int indice = stock.indexOf((Articulo) new Libro(id));
		return (Libro) stock.get(indice);
	}

	/**
	 * Extrae un Juego de Tablero a traves de su id
	 * 
	 * @param id
	 * @return
	 */
	public Tablero getTablero(int id) {
		int indice = stock.indexOf((Articulo) new Tablero(id));
		return (Tablero) stock.get(indice);
	}

	/**
	 * Extrae un Juego de Cartas a traves de su id
	 * 
	 * @param id
	 * @return
	 */
	public Articulo getCartas(int id) {
		int indice = stock.indexOf((Articulo) new Cartas(id));
		return stock.get(indice);
	}

	/**
	 * Extrae un Juego de Rol a través de su id
	 * 
	 * @param id
	 * @return
	 */
	public Rol getRol(int id) {
		int indice = stock.indexOf((Articulo) new Rol(id));
		return (Rol) stock.get(indice);
	}

	/**
	 * Extrae una Figura a través de su id
	 * 
	 * @param id
	 * @return
	 */
	public Figura getFigura(int id) {
		int indice = stock.indexOf((Articulo) new Figura(id));
		return (Figura) stock.get(indice);
	}

	/**
	 * Devuelve un articulo a traves de su id
	 * 
	 * @param cod
	 * @return
	 */
	public Articulo devuelvePorCódigo(int id) {
		Articulo articulo;
		for (Articulo art : stock) {
			articulo = art;
			if (articulo.getId() == id) {
				return articulo;
			}
		}
		return null;
	}
	/**
	 * 
	 * @param articulo
	 * @return indexOf articulo
	 */
	public int indexOf(Articulo articulo) {
		return stock.indexOf(articulo);
	}

	/**
	 * Comprueba si hay articulos en la cesta del usuario
	 * 
	 * @return
	 */
	public boolean isBasketEmpty() {
		for (Articulo art : stock) {
			if (art.isSeleccionado())
				return false;
		}
		return true;

	}
	/**
	 * Devuelve el stock de productos (ArrayList)
	 * @return
	 */
	public ArrayList<Articulo> getStock() {
		return this.stock;
	}

	/**
	 * Elimina un articulo a traves de su id
	 * 
	 * @param id
	 */
	public void removeArticulo(int id) {
		int indice = stock.indexOf((Articulo) new Libro(id));
		stock.remove(indice);
	}

	/**
	 * Aumenta el stock de todos los articulos en +10
	 */
	public void replenishAll() { 	
		for (Articulo art : stock) {
			art.setCantidad(art.getCantidad() + 10);
		}

	}

	/**
	 * devuelve un iterador del arraylist
	 * 
	 * @return
	 */
	public ListIterator<Articulo> listIterator() {
		return stock.listIterator();
	}

	/**
	 * Devuelve un iterador ordenando los articulos por nombre
	 * 
	 * @return
	 */
	public ListIterator<Articulo> iteratorName() {
		sortByName();
		return stock.listIterator();
	}

	/**
	 * Devuelve un iterador ordenando los articulos por precio
	 * 
	 * @return
	 */
	public ListIterator<Articulo> iteratorPrice() {
		sortByPrice();
		return stock.listIterator();
	}

	/**
	 * Devuleve un iterador de Articulos del tipo Libro
	 * 
	 * @return
	 */
	public ListIterator<Articulo> iteratorLibro() {
		ArrayList<Articulo> listaLibros = new ArrayList<Articulo>();
		for (Articulo art : stock) {
			if (art instanceof Libro) {
				listaLibros.add(art);
			}
		}
		return listaLibros.listIterator();
	}

	/**
	 * Devuleve un iterador de Articulos del tipo Figura
	 * 
	 * @return
	 */
	public ListIterator<Articulo> iteratorFigura() {
		ArrayList<Articulo> listaFiguras = new ArrayList<Articulo>();
		for (Articulo art : stock) {
			if (art instanceof Figura) {
				listaFiguras.add(art);
			}
		}
		return listaFiguras.listIterator();
	}

	/**
	 * Devuleve un iterador de Articulos del tipo Juego
	 * 
	 * @return
	 */
	public ListIterator<Articulo> iteratorJuego() {
		ArrayList<Articulo> listaJuego = new ArrayList<Articulo>();
		for (Articulo art : stock) {
			if (art instanceof Juego) {
				listaJuego.add(art);
			}
		}
		return listaJuego.listIterator();
	}

	/**
	 * Devuelve el catálogo de artículos (nombre, tipo de articulo y precio)
	 * 
	 * @return
	 * @throws IOException 
	 */
	public String getCatalogo(){
		StringBuilder catalogo = new StringBuilder();
		catalogo.append("----CAT\u00c1LOGO DE "+LocalDate.now()+"----\n");
		for (Articulo art : stock) {
			catalogo.append("\nArt\u00edculo: " + art.getNombre() + ", Categor\u00eda: " + art.getClass()
					+", Precio: "+art.calculateFinalPrice());
			
		}
		return catalogo.toString();		
	
	}


	@Override
	public String toString() {
		return "Stock [stock=" + stock + "]";
	}
	/**
	 * Devuelve un iterador con los elementos que han sido introducidos en la cesta
	 * @return listIterator
	 */
	public ListIterator<Articulo> iteradorCesta() {
		ArrayList<Articulo> listaCesta  = getStock();
		for(Articulo art: getStock()){
			if (art.isSeleccionado())
				listaCesta.add(art);
		}
		return listaCesta.listIterator();
	}
	/**
	 * Vacia la cesta de articulos
	 */
	public void setBasketEmpty() {
		for (Articulo art: getStock()){
			art.setSeleccionado(false);
		}
	}
}
