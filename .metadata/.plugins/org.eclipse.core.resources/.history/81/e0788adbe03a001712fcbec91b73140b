package gui;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;

import javax.swing.JOptionPane;

import enumeraciones.*;
import excepciones.EdadNoValidaException;
import excepciones.FechaNoValidaException;
import excepciones.NombreNoValidoException;
import excepciones.PesoNoValidoException;
import excepciones.PrecioNoValidoException;
import jerarquia.Articulo;
import jerarquia.Cartas;
import jerarquia.Figura;
import jerarquia.Libro;
import jerarquia.Rol;
import jerarquia.Tablero;

import javax.swing.JPanel;

/**
 * 
 * acciones para a�adir Figuras y Juegos (con su respectiva herencia)
 * 
 * @author d16lealp
 *
 */
public class PanelAnadir extends PanelPadre {

	public PanelAnadir() {
		setTitle("Stock: Introducir articulo");
		textNombre.setEnabled(true);
		textDetalles.setEnabled(true);
		textPrecio.setEnabled(true);
		textPaginas.setEnabled(true);
		btnAnterior.setVisible(false);
		btnSacar_borrar.setVisible(false);
		btnSiguiente.setVisible(false);
		rdbtnCartas.setSelected(true);
		panelButtons.setVisible(false);
		comboBoxEstado.setEnabled(true);
		btnALaCesta_anadir.setText("A\u00f1adir");
		
		btnALaCesta_anadir.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				if (panelLibro.isVisible()) {
					try {
							addBook();
							Principal.stock.setModificado(true);
					} 
				catch (NumberFormatException | NombreNoValidoException | PrecioNoValidoException
							| FechaNoValidaException e1) {
						JOptionPane.showMessageDialog(null, e1.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
					}
				}else if (panelJuego.isVisible()) {
					try {
						addGame();
					} catch (NumberFormatException | PrecioNoValidoException
							| EdadNoValidaException e1) {
						JOptionPane.showMessageDialog(null, e1.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
					}
					Principal.stock.setModificado(true);
				}else if (panelFigura.isVisible()) {
					try {
						addToy();
						Principal.stock.setModificado(true);
					} catch (NumberFormatException | PesoNoValidoException | PrecioNoValidoException e1) {
						JOptionPane.showMessageDialog(null, e1.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);

					}
				}
				
			}
			/**
			 * Añade un juego al stock 
			 * @throws EdadNoValidaException 
			 * @throws PrecioNoValidoException 
			 * @throws NumberFormatException 
			 */
			protected void addGame() throws NumberFormatException, PrecioNoValidoException, EdadNoValidaException {
				
				if(rdbtnCartas.isSelected()){
					enableCartas();
					Principal.stock.addToStock(new Cartas(textNombre.getText(), textDetalles.getText(),
							Double.parseDouble(textPrecio.getText()),
							(EstadoArticulo) comboBoxEstado.getSelectedItem(), LocalDate.now(),
							Double.parseDouble(textFieldDuracion.getText()),Integer.parseInt(textEdad.getText()),
							Integer.parseInt(textCartas.getText()),
							(DificultadCartas)comboBoxDificultad.getSelectedItem(),chkbxColeccion.isSelected()),Integer.parseInt(textStock.getText()));
							
				}else if (rdbtnRol.isSelected()){
					enableRol();
					enableCartas();
					Principal.stock.addToStock(new Rol(textNombre.getText(), textDetalles.getText(),
							Double.parseDouble(textPrecio.getText()),
							(EstadoArticulo) comboBoxEstado.getSelectedItem(), LocalDate.now(),
							Double.parseDouble(textFieldDuracion.getText()),Integer.parseInt(textEdad.getText()),
							(GeneroRol)comboBox_Genero.getSelectedItem(),(MaterialRol)comboBoxMaterialRol.getSelectedItem(),
							Double.parseDouble(textEdicion.getText())),Integer.parseInt(textStock.getText()));
				
				}else if (rdbtnTablero.isSelected()){
					enableTablero();
					Principal.stock.addToStock(new Tablero(textNombre.getText(), textDetalles.getText(),
							Double.parseDouble(textPrecio.getText()),
							(EstadoArticulo) comboBoxEstado.getSelectedItem(), LocalDate.now(),
							Double.parseDouble(textFieldDuracion.getText()), Integer.parseInt(textEdad.getText()),
							Integer.parseInt(textPiezas.getText()),Double.parseDouble(textDimensiones.getText()),Integer.parseInt(textJugadores.getText()),
							chkbxColeccion.isSelected()),Integer.parseInt(textStock.getText()));
				}
			}
			/**
			 * Añade una figura al stock
			 * @throws PesoNoValidoException
			 * @tInthrows PrecioNoValidoException
			 */
			protected void addToy() throws PesoNoValidoException,
					PrecioNoValidoException {
				Principal.stock.addToStock(new Figura(textNombre.getText(), textDetalles.getText(),
						Double.parseDouble(textPrecio.getText()),
						(EstadoArticulo) comboBoxEstado.getSelectedItem(), LocalDate.now(),
						(double) (spinnerPeso.getValue()), textTematica.getText(), chkbxColeccion.isSelected(),
						chckbxDesmontable.isSelected(), (int) (numElementos.getValue())),
						Integer.parseInt(textStock.getText()));
			}
			/**
			 * Añade un libro al arrayList
			 * @throws NombreNoValidoException
			 * @throws PrecioNoValidoException
			 * @throws FechaNoValidaException
			 */
			protected void addBook() throws NombreNoValidoException,
					PrecioNoValidoException, FechaNoValidaException {
				Principal.stock.addToStock(new Libro(textNombre.getText(), textDetalles.getText(),
						Double.parseDouble(textPrecio.getText()),
						(EstadoArticulo) comboBoxEstado.getSelectedItem(), LocalDate.now(),
						Integer.parseInt(textPaginas.getText()), readDateSpinner(spinnerPublicacion),
						textAutor.getText(), true, (IdiomaLibro) comboBox_Idioma.getSelectedItem(),
						(CategoriaLibro) comboBox_Genero.getSelectedItem()),
						Integer.parseInt(textStock.getText()));
			}
		});

	}

}
