package gui;

import java.awt.EventQueue;

import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JMenuBar;
import javax.swing.JMenu;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import java.awt.event.ActionEvent;
import javax.swing.KeyStroke;

import ficheros.Fichero;
import ficheros.Filtro; //Nuestra clase que maneja el filtro para la extension de los ficheros
import java.awt.event.KeyEvent;
import java.awt.event.InputEvent;

import java.awt.event.ActionListener;
import java.awt.Color;

import stock.FondoImagen;
import stock.Stock;

import java.awt.Font;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.sql.Date;
import java.text.SimpleDateFormat;
import java.time.LocalDate;

import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JComponent;

import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.image.BufferedImage;

import javax.swing.JPanel;
import java.awt.Cursor;
import javax.swing.JLabel;
import java.awt.Rectangle;
import java.awt.Toolkit;

/**
 * Clase Principal que despliega el JFrame de base
 * 
 * @author pablo
 *
 */
public class Principal {
	protected static JFrame framePrincipal;
	protected static Stock stock = new Stock();
	private DialogHelp ayuda=null;
	protected static JMenuBar menuEmpleado;
	protected static JMenuBar menuUsuario;
	private JButton btnWeb;
	private static JFileChooser fileChooser = new JFileChooser();
	private Filtro filtro = new Filtro(".obj", "obj");
	private JMenu menuArticulos;
	static {
		//Fichero.fichero = new File("stockUltimo.obj");
		// try {
		// stock = (Stock) Fichero.open(Fichero.fichero);
		// stock.setModificado(false);		// } catch (ClassNotFoundException | IOException e) {
		// JOptionPane.showMessageDialog(framePrincipal, "no se ha cargado ningun stock", "Aviso",
		// JOptionPane.WARNING_MESSAGE);
		// }
	}

	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				/*
				 * DialogBienvenida lanza un JDialog para escoger si se accede a
				 * la vista de Usuario o de Administrador
				 */
				DialogBienvenida bienvenida = new DialogBienvenida();
				Principal window = new Principal();
				window.framePrincipal.setVisible(false);
			}
		});
	}

	public Principal() {
		initialize();
	}

	private void initialize() {
		framePrincipal = new JFrame();
		framePrincipal.setIconImage(Toolkit.getDefaultToolkit().getImage(Principal.class.getResource("/img/icono.png")));
		framePrincipal.setResizable(false);
		framePrincipal.addWindowListener(new WindowAdapter() {
			@Override
			public void windowClosing(WindowEvent arg0) {
				salir();
			}
		});
		cargarImagenFondo();
		framePrincipal.setTitle("Developer's Dungeon - May the force be with Unix");
		framePrincipal.getContentPane().setBackground(Color.LIGHT_GRAY);
		framePrincipal.setBackground(Color.LIGHT_GRAY);
		framePrincipal.setBounds(400, 400, 500, 281);
		framePrincipal.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
		framePrincipal.getContentPane().setLayout(null);

		cargarMenuUsuario();

		cargarMenuOfertas();

		cargarMenuArticulo();

		cargarMenuCesta();

		cargarMenuContacto();

		cargarMenuCatalogo();

		cargarMenuEmpleado();

		crearMenuGestion();

		crearMenuPedidos();

		cargarMenuDestacados();

		cargarBotonWeb();

	}
	/**
	 * Carga la imagen de fondo
	 */
	protected void cargarImagenFondo() {
		try {
			BufferedImage image = null;
			image = ImageIO.read(new File(getClass().getResource("/img/fondo.jpg").getFile()));
			FondoImagen fondo = new FondoImagen(image);
			((JComponent) framePrincipal.getContentPane()).setBorder(fondo);
			framePrincipal.getContentPane().setLayout(null);
		} catch (IOException e) {
			JOptionPane.showMessageDialog(framePrincipal, "problemas al cargar el fondo","Error", JOptionPane.WARNING_MESSAGE);
		}
	}

	/**
	 * Carga el menu de usuario Articulos (mostrar por precio, mostrar por
	 * nombre, mostrar por categoria)
	 */
	protected void cargarMenuArticulo() {
		menuArticulos = new JMenu("Articulos");
		menuArticulos.setMnemonic('C');
		menuArticulos.setBackground(Color.LIGHT_GRAY);
		menuArticulos.setToolTipText("Go Shopping");
		menuUsuario.add(menuArticulos);

		JMenuItem mntmMostrarPrecio = new JMenuItem("Ordenar por Precio");
		mntmMostrarPrecio.setMnemonic(KeyEvent.VK_P);
		mntmMostrarPrecio.setToolTipText("Ordenar por precio");
		mntmMostrarPrecio.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
				PanelMostrar ordenaPrecio = new PanelMostrar(stock.iteratorPrice());
				ordenaPrecio.setVisible(true);

			}
		});
		mntmMostrarPrecio.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_P, InputEvent.CTRL_MASK));
		menuArticulos.add(mntmMostrarPrecio);

		JMenuItem mntmMostrarNombre = new JMenuItem("Ordenar por Nombre");
		mntmMostrarNombre.setMnemonic(KeyEvent.VK_N);
		mntmMostrarNombre.setToolTipText("Ordenar por Nombre");
		mntmMostrarNombre.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
				if (stock.isEmpty())
					msjEmptyStock();
				else {
					PanelMostrar ordenaNombre = new PanelMostrar(stock.iteratorName());
					ordenaNombre.setVisible(true);
				}
			}
		});
		mntmMostrarNombre.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_N, InputEvent.CTRL_MASK));
		menuArticulos.add(mntmMostrarNombre);

		crearMostrarCategorias(menuArticulos);
	}

	/**
	 * Carga el menu de usuario Cesta (mostrar cesta, vaciar cesta)
	 */
	protected void cargarMenuCesta() {
		JMenu mnCesta = new JMenu("Cesta");
		mnCesta.setMnemonic('T');
		mnCesta.setBackground(Color.LIGHT_GRAY);
		mnCesta.setToolTipText("Revisa tu cesta");
		menuUsuario.add(mnCesta);

		JMenuItem mntmVaciarCesta = new JMenuItem("Vaciar");
		mntmVaciarCesta.setMnemonic(KeyEvent.VK_V);
		mntmVaciarCesta.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_V, InputEvent.CTRL_MASK));
		mntmVaciarCesta.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				if (stock.isBasketEmpty()) {
					JOptionPane.showMessageDialog(framePrincipal,
							"No has seleccionado nada para la cesta\n vuelve cuando hayas elegido", "Esta Vacia",
							JOptionPane.WARNING_MESSAGE);
				}
			}
		});
		mnCesta.add(mntmVaciarCesta);

		JMenuItem mntmVerCesta = new JMenuItem("Mostrar");
		mntmVerCesta.setMnemonic(KeyEvent.VK_M);
		mntmVerCesta.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_M, InputEvent.CTRL_MASK));
		mntmVerCesta.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				if (stock.isBasketEmpty()) {
					JOptionPane.showMessageDialog(framePrincipal,
							"No has seleccionado nada para la cesta\n vuelve cuando hayas elegido", "Esta Vacia",
							JOptionPane.WARNING_MESSAGE);
				} else {
					// Muestra todos los articulos seleccionados en una lista y
					// despliega opcion de pagar
				}
			}
		});
		mnCesta.add(mntmVerCesta);
	}

	/**
	 * Carga el menu de usuario Catalogo (descargar catalogo)
	 */
	protected void cargarMenuCatalogo() {
	}

	/**
	 * Carga el boton de acceso a la vista de usuario
	 */
	protected void cargarBotonWeb() {
		btnWeb = new JButton("Vista web");
		btnWeb.setBounds(166, 219, 120, 19);
		framePrincipal.getContentPane().add(btnWeb);
		framePrincipal.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
		btnWeb.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
				menuUsuario.setVisible(true);
				menuEmpleado.setVisible(false);
				btnWeb.setVisible(false);
			}
		});
	}

	/**
	 * Crea el menu de empleado Pedidos (mostrar pedidos)
	 */
	protected void crearMenuPedidos() {
		JMenu mnPedidos = new JMenu("Pedidos");
		mnPedidos.setMnemonic('P');
		menuEmpleado.add(mnPedidos);

		JMenuItem mntmMostrar = new JMenuItem("Mostrar");
		mntmMostrar.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
//				String sFichero = "catalogo.txt";
//				try (FileReader fichero = new FileReader(sFichero)) {
//					fichero.read();
//				} catch (IOException e) {
//					JOptionPane.showMessageDialog(framePrincipal, e.getMessage(), "Fallo al enviar",
//							JOptionPane.WARNING_MESSAGE);
//				}
			}
		});
		mnPedidos.add(mntmMostrar);
	}

	/**
	 * Crea el menu de empleado Destacados (cambiar destacados)
	 */
	protected void cargarMenuDestacados() {
		JMenu mnCambiarDestacados = new JMenu("Cambiar Destacados");
		mnCambiarDestacados.setMnemonic('C');
		mnCambiarDestacados.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {

			}
		});
		menuEmpleado.add(mnCambiarDestacados);

		JMenuItem mntmAyuda_1 = new JMenuItem("Ayuda");
		mntmAyuda_1.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				ayuda =ayuda.getInstance();
				ayuda.setVisible(true);
			}
		});
		mntmAyuda_1.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_F1, 0));
		menuEmpleado.add(mntmAyuda_1);
	}

	/**
	 * Carga el menu de usuario de ofertas
	 */
	protected void cargarMenuOfertas() {
		JMenu mnOfertas = new JMenu("Ofertas");
		mnOfertas.setToolTipText("Revisa las ofertas");
		mnOfertas.setBackground(Color.LIGHT_GRAY);
		mnOfertas.setMnemonic('O');
		menuUsuario.add(mnOfertas);

		JMenuItem mntmTodasOfertas = new JMenuItem("Todas las ofertas");
		mntmTodasOfertas.setMnemonic(KeyEvent.VK_T);
		mntmTodasOfertas.setToolTipText("Nuevo");
		mntmTodasOfertas.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_T, InputEvent.CTRL_MASK));
		mntmTodasOfertas.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				if (stock.isEmpty()) {
					msjEmptyStock();
				} else {
					DialogOferta ofertas = new DialogOferta();
					ofertas.setVisible(true);
				}
			}

		});
		mnOfertas.add(mntmTodasOfertas);
	}

	/**
	 * Creacion del menu Gestion
	 */
	protected void crearMenuGestion() {
		JMenu mnBbdd = new JMenu("Archivo");
		mnBbdd.setMnemonic('A');
		menuEmpleado.add(mnBbdd);

		JMenuItem mntmGuardarcambios = new JMenuItem("Guardar Como");
		mntmGuardarcambios.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
				saveAs();
			}
		});

		JMenuItem mntmNuevoStock = new JMenuItem("Nuevo Stock");
		mntmNuevoStock.setMnemonic(KeyEvent.VK_N);
		mntmNuevoStock.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_N, InputEvent.CTRL_MASK));
		mntmNuevoStock.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
				openNew();
			}
		});
		mnBbdd.add(mntmNuevoStock);
		
		JMenuItem mntmGuardar = new JMenuItem("Guardar");
		mntmGuardar.setMnemonic(KeyEvent.VK_G);
		mntmGuardar.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
				save();
			}
		});
		mntmGuardar.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_G, InputEvent.CTRL_MASK));
		mnBbdd.add(mntmGuardar);
		mnBbdd.add(mntmGuardarcambios);

		JMenuItem mntmAbrir = new JMenuItem("Abrir Stock");
		mntmAbrir.setMnemonic(KeyEvent.VK_A);
		mntmAbrir.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_A, InputEvent.CTRL_MASK));
		mntmAbrir.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
				recuperarCopia();
			}
		});
		mnBbdd.add(mntmAbrir);

		JMenuItem mntmSalir = new JMenuItem("Salir");
		mntmSalir.setMnemonic(KeyEvent.VK_S);
		mntmSalir.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_S, InputEvent.CTRL_MASK | InputEvent.ALT_MASK));
		mntmSalir.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
				salir();
			}
		});
		mnBbdd.add(mntmSalir);
		JMenu mnGestinArticulos = new JMenu("Gesti\u00f3n Articulos");
		mnGestinArticulos.setMnemonic('G');
		menuEmpleado.add(mnGestinArticulos);

		JMenuItem mntmAadirNuevo = new JMenuItem("Incluir nuevo");
		mntmAadirNuevo.setMnemonic(KeyEvent.VK_I);
		mntmAadirNuevo.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_I, InputEvent.CTRL_MASK));
		mntmAadirNuevo.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				PanelAnadir anadir = new PanelAnadir(stock.listIterator());
				anadir.setVisible(true);
				anadir.cleanRightPanel();
			}
		});
		mnGestinArticulos.add(mntmAadirNuevo);

		JMenuItem mntmEliminar = new JMenuItem("Eliminar");
		mntmEliminar.setMnemonic(KeyEvent.VK_E);
		mntmEliminar.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_E, InputEvent.CTRL_MASK));
		mntmEliminar.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
				if(!stock.isEmpty()){
				PanelEliminar delete = new PanelEliminar(stock.listIterator());
				delete.setVisible(true);
				}else{
					msjEmptyStock();
				}
			}
		});

		JMenuItem mntmModificar = new JMenuItem("Modificar");
		mntmModificar.setMnemonic(KeyEvent.VK_O);
		mntmModificar.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_O, InputEvent.CTRL_MASK));
		mntmModificar.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
				if(!stock.isEmpty()){
					PanelModificar modificar = new PanelModificar(stock.listIterator());
					modificar.setVisible(true);
				} else 
					msjEmptyStock();
				
			}
		});

		JMenuItem mntmMostrar_1 = new JMenuItem("Mostrar");
		mntmMostrar_1.setMnemonic(KeyEvent.VK_M);
		mntmMostrar_1.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_M, InputEvent.CTRL_MASK));
		mntmMostrar_1.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
				if(!stock.isEmpty()) {
					PanelMostrar mostrar = new PanelMostrar(stock.listIterator());
					mostrar.setVisible(true);
				} else
					msjEmptyStock();
				
			}
		});
		mnGestinArticulos.add(mntmMostrar_1);
		mnGestinArticulos.add(mntmModificar);
		mnGestinArticulos.add(mntmEliminar);

		JMenuItem mntmBuscarYEliminar = new JMenuItem("Buscar y Eliminar");
		mntmBuscarYEliminar.setMnemonic(KeyEvent.VK_B);
		mntmBuscarYEliminar.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_B, InputEvent.CTRL_MASK));
		mntmBuscarYEliminar.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
				if (!stock.isEmpty()) {
					PanelBuscarEliminar be = new PanelBuscarEliminar(stock.listIterator());
					be.setVisible(true);
					be.btnAnterior.setEnabled(false);
				} else
					msjEmptyStock();

			}
		});
		mnGestinArticulos.add(mntmBuscarYEliminar);

		JMenuItem mntmActualizarExistencias = new JMenuItem("Actualizar existencias");
		mntmActualizarExistencias.setMnemonic(KeyEvent.VK_S);
		mntmActualizarExistencias.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_S, InputEvent.CTRL_MASK));
		mntmActualizarExistencias.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
				if (!stock.isEmpty()) {
					if (JOptionPane.showConfirmDialog(framePrincipal, "Aumentaremos todas las existencias\nEst\u00e1s seguro?",
							"Reponer", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
						stock.replenishAll();
					} else
						msjEmptyStock();
				}
			}
		});
		mnGestinArticulos.add(mntmActualizarExistencias);
	}

	/**
	 * Creacion del menu Mostrar por Categoria
	 * 
	 * @param mnArticulos
	 */
	protected void crearMostrarCategorias(JMenu mnArticulos) {
		JMenuItem mnCatalogo = new JMenuItem("Descargar C\u00e1talogo");
		mnCatalogo.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				descargaCatalogo();
			}
		});
		menuArticulos.add(mnCatalogo);
		JMenu mnMostrarPorCategoria = new JMenu("Mostrar por Categor\u00eda");
		mnArticulos.add(mnMostrarPorCategoria);

		JMenuItem mntmJuegos = new JMenuItem("Juegos");
		mntmJuegos.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
				try {
					PanelMostrar mostrarJuegos = new PanelMostrar(stock.iteratorJuego());
					mostrarJuegos.setVisible(true);
				} catch (Exception e) {
					msjEmptyStock();
				}
			}
		});
		mnMostrarPorCategoria.add(mntmJuegos);

		JMenuItem mntmFiguras = new JMenuItem("Figuras");
		mntmFiguras.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				if(!stock.isEmpty()) {
					PanelMostrar mostrarFiguras = new PanelMostrar(stock.iteratorFigura());
					mostrarFiguras.setVisible(true);
				}else
					msjEmptyStock();
			}
		});
		mnMostrarPorCategoria.add(mntmFiguras);

		JMenuItem mntmLibros = new JMenuItem("Libros");
		mntmLibros.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				if(!stock.isEmpty()) {
					PanelMostrar mostrarLibros = new PanelMostrar(stock.iteratorLibro());
					mostrarLibros.setVisible(true);
				} else
					msjEmptyStock();
			}
		});
		mnMostrarPorCategoria.add(mntmLibros);
	}

	/**
	 * Creacion de la barra de menu de Empleado
	 */
	protected void cargarMenuEmpleado() {
		menuEmpleado = new JMenuBar();
		menuEmpleado.setBounds(0, 0, 500, 21);
		framePrincipal.getContentPane().add(menuEmpleado);
	}

	/**
	 * Creacion del menu de contacto
	 */
	protected void cargarMenuContacto() {
		JMenu mnContacto = new JMenu("Contacto");
		mnContacto.setToolTipText("necesitas ayuda?");
		mnContacto.setMnemonic('O');
		mnContacto.setBackground(Color.LIGHT_GRAY);
		menuUsuario.add(mnContacto);

		JMenuItem mntmAcercaDe = new JMenuItem("Acerca de...");
		mntmAcercaDe.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				DialogAbout about = new DialogAbout();
				about.setVisible(true);
			}
		});
		mnContacto.add(mntmAcercaDe);
		JMenuItem mntmAyuda = new JMenuItem("Ayuda");
		mntmAyuda.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
				DialogHelp ayuda = new DialogHelp();
				ayuda.setVisible(true);
			}
		});
		mntmAyuda.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_F1, 0));
		mnContacto.add(mntmAyuda);

		JMenuItem menuFormulario = new JMenuItem("Formulario de Contacto");
		menuFormulario.setMnemonic(KeyEvent.VK_F);
		menuFormulario.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
				DialogFormulario formulario = new DialogFormulario();
				formulario.setVisible(true);
			}
		});
		menuFormulario.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_F, InputEvent.CTRL_MASK));
		mnContacto.add(menuFormulario);
	}

	/**
	 * Carga las barra de navegacion del usuario
	 */
	protected void cargarMenuUsuario() {
		menuUsuario = new JMenuBar();
		framePrincipal.setTitle("Developer's Dungeon - May the force be with Unix");
		menuUsuario.setFont(new Font("Comic Sans MS", Font.PLAIN, 11));
		menuUsuario.setBackground(Color.LIGHT_GRAY);
		menuUsuario.setToolTipText("Bienvenido a la Mazmorra del Desarrollador");
		menuUsuario.setBounds(0, 0, 500, 21);
		framePrincipal.getContentPane().add(menuUsuario);
	}

	/**
	 * Guarda el catálogo en un documento
	 */
	protected void descargaCatalogo() {
		String sFichero = "catalogo.txt";
		String mensaje = stock.getCatalogo();
		try (FileWriter fichero = new FileWriter(sFichero)) {
			fichero.write(mensaje);
		} catch (IOException e) {
			JOptionPane.showMessageDialog(framePrincipal, e.getMessage(), "Fallo al enviar",
					JOptionPane.WARNING_MESSAGE);
		}
		JOptionPane.showMessageDialog(framePrincipal, "Descargado con \u00c9xito");
	}

	/**
	 * Abre un nuevo stock
	 */
	protected void openNew() {

		if (stock.isModificado()) {

			int respuesta = JOptionPane.showOptionDialog(framePrincipal, "Desea guardar los cambios?", "Hay Cambios Sin Guardar",
					JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.WARNING_MESSAGE, null, null, null);
			String nombre = JOptionPane.showInputDialog("Introduce un nombre para este stock");
			if (respuesta == JOptionPane.YES_OPTION) {
				saveAs();
				Fichero.setFichero(nombre);
				stock = new Stock();
				framePrincipal.setTitle(nombre);
				stock.setModificado(false);
			} else if (respuesta == JOptionPane.NO_OPTION) {
				Fichero.setFichero(nombre);
				stock = new Stock();
				framePrincipal.setTitle(nombre);
				stock.setModificado(false);
			}
		} else {
			Fichero.setFichero("Stock: Nuevo");
			stock = new Stock();
			framePrincipal.setTitle(Fichero.fichero.getName());
			stock.setModificado(false);
		}
	}

	/**
	 * Guarda una copia del stock actual
	 */
	protected void saveAs() {
		fileChooser.setAcceptAllFileFilterUsed(false);
		fileChooser.addChoosableFileFilter(filtro);

		if (JFileChooser.APPROVE_OPTION == fileChooser.showDialog(fileChooser, "Guardar Archivo")) {
			fileChooser.setAcceptAllFileFilterUsed(false);
			Fichero.checkFile(fileChooser.getSelectedFile());
			if (Fichero.getFichero().exists()) {
				int option = JOptionPane.showOptionDialog(framePrincipal,
						"El archivo indicado ya existe, ¿Desea Sobreescribirlo?", "Guardando",
						JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.WARNING_MESSAGE, null, null, null);
				if (option == JOptionPane.YES_OPTION) {
					try {
						Fichero.saveAs(stock, Fichero.getFichero());
					} catch (IOException ex) {
						JOptionPane.showMessageDialog(framePrincipal, "Error al guardar el archivo", "ERROR",
								JOptionPane.ERROR_MESSAGE);
					}
				} else {
					JOptionPane.showMessageDialog(framePrincipal, "No se ha podido guardar", "ERROR", JOptionPane.ERROR_MESSAGE);
				}

			} else {
				save();
			}
			stock.setModificado(false);
		}
	}

	/**
	 * Guarda el stock en un fichero
	 */
	protected void save() {
		if (Fichero.fichero.getName().equalsIgnoreCase("")) {
			saveAs();
		} else {
			try {
				Fichero.save(stock);
				stock.setModificado(false);
			} catch (IOException ex) {
				JOptionPane.showMessageDialog(framePrincipal, "Hay problemas para guardar el fichero", "ERROR",
						JOptionPane.ERROR_MESSAGE);
			}
		}
	}

	/**
	 * Abre un inventario anterior
	 */
	protected void recuperarCopia() {
		try {
			openFileChooser();
			stock.setModificado(false);
		} catch (IOException | ClassNotFoundException e1) {
			JOptionPane.showMessageDialog(framePrincipal, "Hay problemas para abrir el fichero", "ERROR",
					JOptionPane.ERROR_MESSAGE);
			Fichero.newFile();
		}

	}

	/**
	 * 
	 * @throws FileNotFoundException
	 * @throws ClassNotFoundException
	 * @throws IOException
	 */
	private void openFileChooser() throws FileNotFoundException, ClassNotFoundException, IOException {
		fileChooser.setAcceptAllFileFilterUsed(false);
		fileChooser.addChoosableFileFilter(filtro);
		if (fileChooser.showDialog(fileChooser, "Abrir Fichero") == JFileChooser.APPROVE_OPTION) {
			Fichero.fichero = fileChooser.getSelectedFile();
			stock = (Stock) Fichero.open(fileChooser.getSelectedFile());
			JOptionPane.showMessageDialog(framePrincipal, "Cargado con \u00e9xito");
		}
	}

	/**
	 * Mensaje de stock vacio --> ¿metodo o desde el evento?
	 */
	private void msjEmptyStock() {
		JOptionPane.showMessageDialog(framePrincipal, "No hay art\u00edculos", null, JOptionPane.ERROR_MESSAGE);
	}

	/**
	 * Comprueba si hubo cambios y sale del programa
	 */
	protected void salir() {
		if (stock.isModificado()) {
			int respuesta = JOptionPane.showOptionDialog(framePrincipal, "No has guardado, Desea Guardar?", "NO HAS GUARDADO",
					JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.WARNING_MESSAGE, null, null, null);
			if (respuesta == JOptionPane.YES_OPTION) {
				saveAs();
				System.exit(0);
			} else if (respuesta == JOptionPane.NO_OPTION) {
				System.exit(0);
			} else {
			}
		} else {
			System.exit(0);
		}
	}
}
