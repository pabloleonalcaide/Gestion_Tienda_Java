package jerarquia;

import java.io.Serializable;
import java.time.LocalDate;
import enumeraciones.EstadoArticulo;
import excepciones.PrecioNoValidoException;

public abstract class Articulo implements Serializable {

	private static final long serialVersionUID = 1L;
	private String nombre;
	private String descripcion;
	private double precio;
	private double descuento = 1;
	private double precioTotal;
	private EstadoArticulo estado;
	private LocalDate fechaEntrada;
	private boolean seleccionado;
	private int id;
	private static int codigo = 1;
	private int cantidad;

	public Articulo(String nombre, String descripcion, double precio, EstadoArticulo estado, LocalDate fecha,int cantidad)
			throws PrecioNoValidoException {
		setId(id);
		this.seleccionado = false; // no puede incluirse directamente
									// seleccionado para la cesta de compra
		this.precioTotal = calculateFinalPrice();
		setNombre(nombre);
		setDescripcion(descripcion);
		setPrecio(precio);
		setEstado(estado);
		setFecha(fecha);
		setCantidad(cantidad);
	}

	/**
	 * Constructor por id
	 * 
	 * @param id
	 */
	public Articulo(int id) {
		this.id = id;
	}

	/**
	 * Constructor por nombre
	 * 
	 * @param nombre
	 */
	public Articulo(String nombre) {
		setNombre(nombre);
	}

	// protected void setId(int id) {
	// this.id=id;
	//
	// }
	/**
	 * Calcula el precio al que será vendido el producto.
	 * 
	 * @return precio total tras aplicar descuentos
	 */
	public double calculateFinalPrice() {
		this.precioTotal = getPrecio() - obtenerDescuento();
		return precioTotal;
	}

	/**
	 * Establece el id unico del articulo
	 */
	private void setId(int id) {
		this.id = codigo++;
	}

	/**
	 * 
	 * @return identificador univoco del articulo
	 */
	public int getId() {
		return id;
	}

	/**
	 * 
	 * @return nombre
	 */
	public String getNombre() {
		return nombre;
	}

	/**
	 * 
	 * @param nombre
	 */
	public void setNombre(String nombre) {
		this.nombre = nombre;
	}

	/**
	 * 
	 * @return descripcion
	 */
	public String getDescripcion() {
		return descripcion;
	}

	/**
	 * 
	 * @param descripcion
	 */
	public void setDescripcion(String descripcion) {
		this.descripcion = descripcion;
	}

	/**
	 * 
	 * @return precio base del producto (sin descuento)
	 */
	public double getPrecio() {
		return precio;
	}

	/**
	 * 
	 * @param precio
	 *            base del producto (sin descuento)
	 * @throws PrecioNoValidoException
	 */
	public void setPrecio(double precio) throws PrecioNoValidoException {
		if (precio > 1000 && getEstado() == EstadoArticulo.DESCATALOGADO)
			throw new PrecioNoValidoException("los productos descatalogados no valen tanto");
		else if (precio < 10 && getEstado() == EstadoArticulo.ED_LIMITADA)
			throw new PrecioNoValidoException("es una edici\u00f3n limitada, vale mas!");
		else if (precio <= 0)
			throw new PrecioNoValidoException("el precio ha de ser positivo");
		else
			this.precio = precio;
	}

	/**
	 * 
	 * @return base de descuento
	 */
	public double getDescuento() {
		return descuento;
	}

	void setDescuento(double descuento) {
		this.descuento = descuento;
	}

	/**
	 * @return estado del producto
	 * @see Enum Estado
	 */
	public EstadoArticulo getEstado() {
		return estado;
	}

	/**
	 * 
	 * @param estado
	 * @see Enum Estado
	 */
	public void setEstado(EstadoArticulo estado) {
		this.estado = estado;
	}

	/**
	 * 
	 * @return fecha de llegada al stock
	 */
	public LocalDate getFecha() {
		return fechaEntrada;
	}

	/**
	 * La fecha se establece en base al momento de instanciar el objeto
	 */
	public void setFecha(LocalDate fecha) {
		this.fechaEntrada = fecha;
	}

	/**
	 * 
	 * @return true / false (dentro/fuera de la cesta de compra)
	 */
	public boolean isSeleccionado() {
		return seleccionado;
	}

	/**
	 * 
	 * @param seleccionado
	 */
	public void setSeleccionado(boolean seleccionado) {
		this.seleccionado = seleccionado;
	}

	/**
	 * Devuelve la clase de Objeto
	 * 
	 * @param articulo
	 * @return
	 */
	public Object getClass(Articulo articulo) {
		return getClass(articulo);
	}

	/**
	 * Devuelve el stock de ese artículo
	 * 
	 * @return
	 */
	public int getCantidad() {
		return cantidad;
	}

	/**
	 * Devuelve el nombre de la clase del articulo
	 * 
	 * @return
	 */
	public String getClassName() {
		return this.getClass().getSimpleName();
	}

	/**
	 * Modifica el stock de ese artículo
	 * 
	 * @param cantidad
	 */
	public void setCantidad(int cantidad) {
		this.cantidad = cantidad;
	}

	/**
	 * Metodo abstracto que calcula el descuento del articulo
	 */
	public abstract void calcularDescuento();

	/**
	 * Metodo abstracto que devuelve el descuento especifico del articulo
	 */
	public abstract double obtenerDescuento();

	@Override
	public String toString() {
		return "\nArticulo [nombre=" + getNombre() + ", descripci\u00f3n=" + getDescripcion() + ", precioTotal="
				+ calculateFinalPrice() + ", estado=" + getEstado() + ", id=" + getId() + "]";
	}

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + id;
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		Articulo other = (Articulo) obj;
		if (id != other.id)
			return false;
		return true;
	}

}